------------------------------------------
变量：
1. 无( ) , 无{ }

函数：
1. ( ){  }
2. int,void,String.....

class:
1. { }
2. <>{ }

------------------------------------------
byte	1
short	2
int	4	默认
long	8

float	4
double	8	默认

char	2

boolean	1


int a= 10000000000 java里写出10000000000就是错的，应该数字结尾加l或者L，并且int换成long
多种类型运算时往大的转

int a=5;
long b=a; 自动类型转换
int c = (int)b; 强制类型转换

char占2个字节  因为java采用unicode编码
char='女' 字符放在一个单引号里
char=65 对 0到65535之间
char='男女' 错 只能一个字符

byte short char 数据类型参与运算时，先一律转换为int再运算

String 是引用类型，不是基本类型，双引号括起来的都是对象

---------------------------------------------------------------
方法区放：
静态变量，代码片段


----------------------------------------------------
类：

权限符public，private，protected可以省略；static是类里面用的，静态方法，不用实例对象就可以（并且不推荐实例对象以后）调用。非static方法是对实例对象调用

-------------------------------------------------------
类的注意点：
可以通过实例对象改变类的静态变量
------------------------------------------------
内中 静态 动态的注意点：

报错：
public class a {
	public static void main(String[] args) {
		f(new d());		
	}
	
	public static void f(b x) {}

	public  interface b {};
	public  class c{};
	public  class d extends c implements b{};	
}
下面3个类要加static

----------------------------------------------------
内部类：
实例化内部类必须在外部类或者外部类的非静态方法中实现
public class b
{
	
	class Employee{}
	
	Employee a1 = new Employee();
	
	public static void main(String[] args) {
		b a2=new b();
		System.out.println(a2.a1);
	}
}


---------------------------------------------------------

super 调用父类的构造函数
this 调用自己的其他构造函数

class Person {
        Person(String na) {		
    	System.out.println(na);
    }
        
    Person(String na, int ag) {	// 带两个参数的构造函数
        this(na);	// 调用其他构造函数，必须放在首句（即不能同时调用两个）
        System.out.println(na);
        System.out.println(ag);
    }
}
---------------------------------------------------------
类内部，this作为参数传递给函数时，this表示实例对象

------------------------------------------------
import java.util.Scanner;
Scanner input = new Scanner(System.in);
System.out.println("请输入一个字符串(中间能加空格或符号)");
String a = input.nextLine();
System.out.print(a);
System.out.println("请输入一个字符串(中间不能加空格或符号)");
String b = input.next();
System.out.print(b);

String[] arr = new String[] {"123","sadfas"};

for(int i=0;i<10;i++){    
    System.out.println(i);
}
int[] arr={1,2,3}
for(int x:arr){}




接口：
public Interface xxx{
}

类
public class xxx extends xxx父类 Implements xxx接口{
}

-------------------------------------------------------------------
枚举
public enum Day2 {
    MONDAY("星期一"),
    TUESDAY("星期二"),
    WEDNESDAY("星期三"),
    THURSDAY("星期四"),
    FRIDAY("星期五"),
    SATURDAY("星期六"),
    SUNDAY("星期日");//记住要用分号结束
}
------------------------------------------------------
异常处理

？ throws这个东西之前一直没想明白后面一个大佬讲的一下子就茅塞顿开了， throws是声明你可能会抛出什么异常··当发生你声明的异常的时候你自己就不用处理了，谁调用你谁去处理了 不加的话，代表你的代码里面自己会处理。 有的时候异常发生了，你自己的代码不知道如何处理或者不愿意处理，你就直接throws出去，让调用者去处理声明就是告诉别人我不处理，你调用我你就的处理
--------------------------------------------------------
对象.hashCode()方法返回10进制的哈希值
对象.toString()方法返回16进制的哈希值
--------------------------------
泛型
泛型的参数不支持基本类型
泛型相关的信息不会进入到运行时阶段（在编译的时候就会用具体的数据类型替换掉泛型定义）

class myobjcet<xxx>{}

myobjcet<int>(123) 错
myobjcet<Integer>(123) 对

类后面加<>，而不是对象后面加<>

------------------------------------------------------
泛型接口的2种使用方法
public interface A<T,N> {
    T nextObject();
    N nextNumber();

public class B implements A<String,Integer> {
	@Override
	public String nextObject() {return "saf"; }
	@Override
	public Integer nextNumber() { return 123; }
}

public class C<T,N> implements A<T,N> {   
	@Override
	public T nextObject() {return null; }
	@Override
	public N nextNumber() {return null;}
}
------------------------------------------------------
泛型类与泛型方法
public class a {
	public static void main(String[] args) {	
		GenericClassExample<Integer> a1=new GenericClassExample(112);
		a1.print1(2133);
		a1.print2("sfsd");
	}	
}

class GenericClassExample<T> {
    private T member;
    public GenericClassExample(T member)
    {
        this.member = member;
    }
    public void print1(T target)
    {
    	System.out.println(target);       
    }
    
    //泛型函数
    public <E> void print2(E input)
    {       
            System.out.println(input);       
    }
 
}
----------------------------------------------------------

-------------------------------------------------------------
接口
extends关键字继承上层接口，可以继承多个接口
-------------------------------------------------------------
List a=new ArrayList();
左边的是上一级
-------------------------------------------------
数组是容器，可以放多个元素，基本数据类型（1，2，3），或者引用数据类型（对象），如果是后者，数组中存放的是对对象的引用
数组本身是引用类型，所以int[] a1= {1,2,3}，a1在栈中，指向堆中的{1,2,3}对象
数组长度不可变，元素类型一致。数组可以自动扩容，实质是系统自动把一个小数组拷贝到大数组
数组存储的元素，地址是连续的，也就是说在物理硬件中它们是挨着的

int[] a1={1,2,3,4};//静态
int[] a1=new int[5];//动态

集合不能存放基本数据类型，会把基本数据类型转成对象
----------------------------------------------------------------------------
获取工作路径
System.out.println(System.getProperty("user.dir"));
-------------------------------------------------------------
类在何时被加载
1.启动main方法时
2.创建类的实例
3.访问静态方法，静态变量
4.反射(.forName方法会，而.class不会)???
-------------------------------------------
?接口、抽象类 中的抽象方法，在子类中必须实现
-------------------------------------------
？父 子 的属性，各是各的，Fu x=new Zi() 与 Zi x=new Zi(),两种情况取x的属性，结果不一样
//继承时
//this.成员变量 – this所在类的成员变量
//this.成员函数 – 当前new对象所在类的成员函数,(？可以理解为父子中同名函数只有一个，不存在两个同名的？)

---------------------------------------------------
直接调用方法 f()，而没有类名（或者对象名），是因为这个方法是继承的父类的
-------------------------------------------------------------
类的生成过程：
.java文件通过javac编译成class文件，运行main方法时，main方法调用c++启动JVM虚拟机，虚拟机把磁盘上编译好的class文件加载到JVM内存，比如方法区，当遇到new关键字时，会通过方法区提供的模板去堆上分配一块内存存储这个对象

spring bean 生成过程
同上，把class文件加载到虚拟机中，
走到spring容器初始化代码，通过配置扫描要扫描的包，对于每个类，BeanDifinition类的子类的属性会存储对象的信息（比如@注解，比如beamClass存储的是class），然后这些子类会放到一个map容器中，map的一个方法会遍历这些BeanDifinition类的子类的对象，验证每个对象的信息，然后new对象，放到单例池中（也是map）。以上是单例对象的过程，是在spring容器初始化时new对象，而原型对象是在getbean时new

---------------------------------------------------
javap xxx.class 反编译
------------------------------------------------
类被加载时？？，加载static{}与static变量？？
